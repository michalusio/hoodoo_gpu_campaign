kind = combinational
title = "Vertex Projection"
size = [-64, -64, 63, 63]
background = 5
components_available = [com_on: -1, com_off: -1, com_and_bit: -1, com_and_3_bit: -1, com_punch_card: -1, com_switch_bit: -1, com_switch_word: -1, com_add: -1, com_constant: -1, com_equal: -1, com_less_s: -1, com_less_u: -1, com_mux: -1, com_nand_word: -1, com_not_word: -1, com_lsl: -1, com_lsr: -1, com_asr: -1, com_rol: -1, com_ror: -1, com_xor_word: -1, com_xnor_word: -1, com_counter: -1, com_decoder_1: -1, com_decoder_2: -1, com_decoder_3: -1, com_div: -1, com_mod: -1, com_delay_line_bit: -1, com_splitter_bit_2: -1, com_splitter_bit_4: -1, com_splitter_bit_8: -1, com_maker_bit_2: -1, com_maker_bit_4: -1, com_maker_bit_8: -1, com_full_adder: -1, com_mul: -1, com_nand_bit: -1, com_nor_bit: -1, com_not_bit: -1, com_splitter_word_2: -1, com_splitter_word_4: -1, com_splitter_word_8: -1, com_maker_word_2: -1, com_maker_word_4: -1, com_maker_word_8: -1, com_static_indexer: -1, com_static_indexer_config: -1, com_concatenator_2: -1, com_concatenator_4: -1, com_concatenator_8: -1, com_or_bit: -1, com_or_3_bit: -1, com_or_word: -1, com_and_word: -1, com_nor_word: -1, com_rom: -1, com_ram: -1, com_register_word: -1, com_delay_line_word: -1, com_register_bit: -1, com_inc: -1, com_neg: -1, com_ram_fast: -1, com_ram_dual_load: -1, com_ssd: -1, com_time: -1, com_console: -1, com_keyboard: -1, com_xnor_bit: -1, com_xor_bit: -1, com_cc_input: -1, com_cc_output: -1]
save_solution_as_custom = "Hoodoo/VertexShader/Project"
input_labels = [["MVP COLUMN 0 xy"],["MVP COLUMN 0 zw"],["MVP COLUMN 1 xy"],["MVP COLUMN 1 zw"],["MVP COLUMN 2 xy"],["MVP COLUMN 2 zw"],["MVP COLUMN 3 xy"],["MVP COLUMN 3 zw"],["V xy"],["V zw"]]
output_labels = ["Px", "Py", "Pz"]
dialogue = [
  (alien_centered, "Now is the time to take a 4D vector and transform it into a 2D point."),
  (info, "You will receive two inputs:
The first one will be a matrix detailing an operation of projecting a point onto a camera plane.
The second one will be a 4D vector we want to project.

The projection works by first multiplying the vector by the matrix.
The output of that operation is of the form (x*w, y*w, z*w, w).
To finish the projection, you need to divide all the coordinates by the fourth one."),
  (info, "Project a 4D vector into a 2D point. Also output the depth."),
]
